{"version":3,"sources":["webpack:///./src/pages/mini-city/js/utils.js","webpack:///./src/pages/mini-city/js/Car.js","webpack:///./src/pages/mini-city/js/textures.js","webpack:///src/pages/mini-city/index.vue","webpack:///./src/pages/mini-city/index.vue?0780","webpack:///./src/pages/mini-city/index.vue"],"names":["js_utils","makeShape","shape","window","THREE","arguments","length","arry","Shape","moveTo","i","lineTo","pathCoords","path","Path","holes","push","console","error","makeExtrudeGeometry","amount","extrudeSetting","steps","bevelEnabled","geometry","ExtrudeBufferGeometry","rotateX","Math","PI","makeShapeGeometry","shapeCoords","this","ShapeGeometry","makeMesh","type","color","material","mesh","MeshLambertMaterial","MeshPhongMaterial","Mesh","castShadow","receiveShadow","Car_Car","colors","index","floor","random","Object3D","wheels","startAngle","that","makeWindow","coords","carBodyShape","carBodyGeometry","translate","carBody","add","addBody","carWindows","carWindowLeft","carWindowLeftFront","carWindowLeftBack","position","z","carWindowRight","clone","carWindowFrontGeometry","CubeGeometry","rotateZ","carWindowFront","carWindowBack","rotation","x","y","addWindows","carLightsGeometry","Geometry","carLigetGeometry","BoxGeometry","forEach","elem","merge","carLightFrontGeometry","scale","carLightBackGeometry","BufferGeometry","fromGeometry","carLights","addLights","wheelFrontLeft","createWheel","set","wheelFrontRight","wheelBackLeft","wheelBackRight","wheel","wheelOuterGeometry","CylinderGeometry","wheelOuter","wheelInner","wheelCenterGeometry","wheelCenter","addWheels","prototype","setPosition","forward","speed","_moving","backward","turnLeft","angle","_turn","turnRight","direction","originAngle","xLength","cos","zLength","sin","_rotateWheels","js_Car","js_textures","canvas","document","createElement","ctx","getContext","width","height","fillStyle","fillRect","canvasTexture","Texture","wrapS","RepeatWrapping","wrapT","needsUpdate","mini_city","name","data","workList","link","img","mounted","scene","camera","renderer","n","cars","config","isMobile","background","innerWidth","innerHeight","Scene","PerspectiveCamera","lookAt","WebGLRenderer","antialias","setSize","setClearColor","shadowMap","enabled","PCFSoftShadowMap","body","appendChild","domElement","navigator","userAgent","match","gridHelper","GridHelper","controls","OrbitControls","enableDamping","dampingFactor","rotateSpeed","buildAuxSystem","hemisphereLight","HemisphereLight","light","AmbientLight","directionalLight","DirectionalLight","target","d","shadow","OrthographicCamera","bias","mapSize","buildLightSystem","planeGeometry","BoxBufferGeometry","plane","createHospital","hospital","baseGeometry","base","frontMainShape","frontMainGeometry","frontMainMaterial","map","repeat","frontMain","frontTopShape","frontTopGeometry","frontTop","frontRoofShelfGeometry","frontRoofShelfCubeGeometry","rotateY","frontRoofShelfCubeYPosition","p","frontRoofShelf","frontPlatGeometry","fronPlat","frontPlatVerticalGeometry","frontPlatVertical","frontPlatVerticalWhiteGeometry","frontPlatVerticalWhite","frontPlatPillarGeometry","frontPlatPillar","frontPlatPillar2","frontBorderVerticles","frontBorderVerticleGeometry","frontBorderVerticleMesh","frontBorderVerticle1","frontBorderVerticle2","frontBorderVerticle3","frontRoofShape","frontRoofGeometry","frontRoof","backMainShape","backMainGeometry","backMain","backMiddleShape","backMiddkeGeometry","backMiddle","backMiddleWindowGeometry","PlaneGeometry","backMiddleWindowMaterial","backMiddleWindow","windowBackOrigin","windowObj","glassGeometry","glass","windowBorderGeometry","windowBorder","windowBorderTop","windowBorderBottom","windowBorderLeft","windowBorderRight","createWindow","j","fenseShape","fenseGeometry","fense","greenShape","greenGeometry","green","tree","treeTrunkGeometry","treeTrunk","treeLeafsGeometry","treeLeafs","createTree","r","lamp","pillarGeomertry","pillar","connectGeometry","connect","lightGeometry","createLamp","buildbuilding","road","roadBorderOuterShape","roadBorderOuterGeometry","roadBorderOuter","roadBorderInnerShape","roadBorderInnnerGeometry","roadBoaderInnder","roadLinesGeometry","roadLineGeometry","roadLinesBottomGeometry","roadLinesTopGeometry","roadLinesLeftGeometry","roadLinesRightGeometry","roadLines","buildRoad","car","loop","carMoving","render","requestAnimationFrame","addEventListener","aspect","updateProjectionMatrix","pages_mini_city","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","href","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/2.610ae83dcc2ca7411693.js","sourcesContent":["var utils = {\r\n  makeShape: function () {\r\n    var shape\r\n    if (window.THREE && arguments.length) {\r\n      var arry = arguments[0]\r\n      shape = new THREE.Shape()\r\n      shape.moveTo(arry[0][0], arry[0][1])\r\n      for (var i=1; i<arry.length; i++) {\r\n        shape.lineTo(arry[i][0], arry[i][1])\r\n      }\r\n      if (arguments.length > 1) {\r\n        for (var i = 1; i < arguments.length; i ++) {\r\n          var pathCoords = arguments[i]\r\n          var path = new THREE.Path()\r\n          path.moveTo(pathCoords[0][0], pathCoords[0][1])\r\n          for (var i = 1; i < pathCoords.length; i++) {\r\n            path.lineTo(pathCoords[i][0], pathCoords[i][1])\r\n          }\r\n          shape.holes.push(path)\r\n        } \r\n      }\r\n      return shape\r\n    }else {\r\n      console.error('Something wrong!')\r\n    }\r\n  },\r\n  makeExtrudeGeometry: function (shape, amount) {\r\n    var extrudeSetting = {\r\n      steps: 1,\r\n      amount: amount,\r\n      bevelEnabled: false\r\n    }\r\n    var geometry = new THREE.ExtrudeBufferGeometry(shape, extrudeSetting)\r\n    geometry.rotateX( -0.5 * Math.PI)\r\n    return geometry\r\n  },\r\n  makeShapeGeometry: function (shapeCoords) {\r\n    var shape = this.makeShape(shapeCoords)\r\n    var geometry = new THREE.ShapeGeometry(shape)\r\n    return geometry\r\n  },\r\n  makeMesh: function (type, geometry, color) {\r\n    var material\r\n    var mesh\r\n    if (type === 'lambert') {\r\n      material = new THREE.MeshLambertMaterial({color: color})\r\n    } else if (type === 'phong') {\r\n      material = new THREE.MeshPhongMaterial({color: color})\r\n    } else {\r\n      console.error('unrecognized type!')\r\n    }\r\n    \r\n    mesh = new THREE.Mesh(geometry, material)\r\n\r\n    mesh.castShadow = true\r\n    mesh.receiveShadow = true\r\n\r\n    return mesh\r\n\r\n  }\r\n}\r\n\r\nexport default utils\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/mini-city/js/utils.js","\"use strict\"\r\nimport utils from \"./utils.js\";\r\nconst Car = function(color) {\r\n  var colors = [0x2cbab2, 0x47a700, 0xd60000, 0x087f87, 0x37ad0e, 0x4d4d4d, 0xce7e00, 0xe0a213, 0x87bcde]\r\n  var index = Math.floor(Math.random() * colors.length)\r\n\r\n  this.color = color || colors[index]\r\n  this.mesh = new THREE.Object3D()\r\n  this.wheels = []\r\n  this.startAngle = 0\r\n\r\n  var that = this\r\n  addBody()\r\n  addWindows()\r\n  addLights()\r\n  addWheels()\r\n\r\n  function addWheels() {\r\n    var wheelFrontLeft = createWheel()\r\n    wheelFrontLeft.position.set(8, 3, -6)\r\n    that.wheels.push(wheelFrontLeft)\r\n    that.mesh.add(wheelFrontLeft)\r\n\r\n    var wheelFrontRight = createWheel()\r\n    wheelFrontRight.position.set(8, 3, 6)\r\n    that.wheels.push(wheelFrontRight)\r\n    that.mesh.add(wheelFrontRight)\r\n\r\n    var wheelBackLeft = createWheel()\r\n    wheelBackLeft.position.set(-8, 3, 6)\r\n    that.wheels.push(wheelBackLeft)\r\n    that.mesh.add(wheelBackLeft)\r\n\r\n    var wheelBackRight = createWheel()\r\n    wheelBackRight.position.set(-8, 3, -6)\r\n    that.wheels.push(wheelBackRight)\r\n    that.mesh.add(wheelBackRight)\r\n\r\n    function createWheel() {\r\n      var wheel = new THREE.Object3D()\r\n\r\n      var wheelOuterGeometry = new THREE.CylinderGeometry(3, 3, 3, 32)\r\n      wheelOuterGeometry.rotateX(0.5 * Math.PI)\r\n      var wheelOuter = utils.makeMesh('lambert', wheelOuterGeometry, 0x000000)\r\n      wheel.add(wheelOuter)\r\n\r\n      var wheelInner = utils.makeMesh('lambert', wheelOuterGeometry, 0xdddddd)\r\n      wheelInner.castShadow = false\r\n      wheelInner.scale.set(0.8, 0.8, 1.1)\r\n      wheel.add(wheelInner)\r\n\r\n      var wheelCenterGeometry = new THREE.CylinderGeometry(1, 1, 3.6, 4)\r\n      wheelCenterGeometry.rotateX(0.5 * Math.PI)\r\n      var wheelCenter = utils.makeMesh('lambert', wheelCenterGeometry, 0xa7a7a7)\r\n      wheelCenter.castShadow = false\r\n      wheel.add(wheelCenter)\r\n\r\n      return wheel\r\n    }\r\n  }\r\n\r\n  function addLights() {\r\n    var carLightsGeometry = new THREE.Geometry()\r\n    var carLigetGeometry = new THREE.BoxGeometry(2, 2, 2)\r\n\r\n    var carLightsPosition = [\r\n      [12.5, 7.1, 6.1],\r\n      [12.5, 7.1, -6.1],\r\n      [-14, 7.1, 6.1],\r\n      [-14, 7.1, -6.1]\r\n    ]\r\n    carLightsPosition.forEach(function(elem) {\r\n      var x = elem[0],\r\n        y = elem[1],\r\n        z = elem[2]\r\n      var geometry = carLigetGeometry.clone()\r\n      geometry.translate(x, y, z)\r\n      carLightsGeometry.merge(geometry)\r\n    })\r\n\r\n    var carLightFrontGeometry = carLigetGeometry.clone()\r\n    carLightFrontGeometry.scale(1, 1.3, 7.1)\r\n    carLightFrontGeometry.translate(12.1, 3.3, 0)\r\n    carLightsGeometry.merge(carLightFrontGeometry)\r\n\r\n    var carLightBackGeometry = carLightFrontGeometry.clone()\r\n    carLightBackGeometry.translate(-26, 0, 0)\r\n    carLightsGeometry.merge(carLightBackGeometry)\r\n\r\n    carLightsGeometry = new THREE.BufferGeometry().fromGeometry(carLightsGeometry)\r\n    var carLights = utils.makeMesh('phong', carLightsGeometry, 0xffffff)\r\n    that.mesh.add(carLights)\r\n\r\n  }\r\n\r\n  function addWindows() {\r\n    var carWindows = new THREE.Object3D()\r\n\r\n    var carWindowLeft = new THREE.Object3D()\r\n    var carWindowLeftFrontCoords = [\r\n      [-2, 8],\r\n      [4, 8],\r\n      [2.5, 12],\r\n      [-2, 12]\r\n    ]\r\n    var carWindowLeftFront = makeWindow(carWindowLeftFrontCoords)\r\n    carWindowLeft.add(carWindowLeftFront)\r\n\r\n    var carWindowLeftBackCoords = [\r\n      [-9, 8],\r\n      [-3, 8],\r\n      [-3, 12],\r\n      [-7.5, 12]\r\n    ]\r\n    var carWindowLeftBack = makeWindow(carWindowLeftBackCoords)\r\n    carWindowLeft.add(carWindowLeftBack)\r\n    carWindowLeft.position.z = 7.1\r\n    carWindows.add(carWindowLeft)\r\n\r\n    var carWindowRight = carWindowLeft.clone()\r\n    carWindowRight.position.z = -7.1\r\n    carWindows.add(carWindowRight)\r\n\r\n    var carWindowFrontGeometry = new THREE.CubeGeometry(0.1, 5, 12)\r\n    carWindowFrontGeometry.rotateZ(0.12 * Math.PI)\r\n    carWindowFrontGeometry.translate(4.2, 10, 0)\r\n    var carWindowFront = utils.makeMesh('phong', carWindowFrontGeometry, 0x000000)\r\n    carWindows.add(carWindowFront)\r\n\r\n    var carWindowBack = carWindowFront.clone()\r\n    carWindowBack.rotation.z = -0.24 * Math.PI\r\n    carWindowBack.position.x = -19\r\n    carWindowBack.position.y = 6\r\n    // carWindowFrontGeometry.translate(4.2,10,7)\r\n    carWindows.add(carWindowBack)\r\n\r\n    that.mesh.add(carWindows)\r\n  }\r\n\r\n  function addBody() {\r\n    var carBodyCoords = [\r\n      [-13, 2],\r\n      [13, 2],\r\n      [13, 8],\r\n      [5, 8],\r\n      [3, 13],\r\n      [-8, 13],\r\n      [-10, 8],\r\n      [-13, 8],\r\n      [-13, 2]\r\n    ]\r\n    var carBodyShape = utils.makeShape(carBodyCoords)\r\n    var carBodyGeometry = utils.makeExtrudeGeometry(carBodyShape, 14)\r\n    carBodyGeometry.translate(0, -7, 0)\r\n    carBodyGeometry.rotateX(0.5 * Math.PI)\r\n    var carBody = utils.makeMesh('phong', carBodyGeometry, that.color)\r\n    that.mesh.add(carBody)\r\n  }\r\n\r\n  function makeWindow(coords) {\r\n    var windowColor = 0x000000\r\n    var shape = utils.makeShape(coords)\r\n    var geometry = utils.makeExtrudeGeometry(shape, 0.1)\r\n    geometry.rotateX(0.5 * Math.PI)\r\n    var mesh = utils.makeMesh('phong', geometry, windowColor)\r\n    mesh.castShadow = false\r\n    return mesh\r\n  }\r\n}\r\nCar.prototype = {\r\n  setPosition: function(x, y, z) {\r\n    this.mesh.position.set(x, y, z)\r\n  },\r\n  forward: function(speed) {\r\n    var speed = speed || 1\r\n    this._moving(speed, true)\r\n  },\r\n  backward: function(speed) {\r\n    var speed = speed || 1\r\n    this._moving(speed, false)\r\n  },\r\n  turnLeft: function(angle, speed) {\r\n    this._turn(angle, true, speed)\r\n  },\r\n  turnRight: function(angle, speed) {\r\n    this._turn(angle, false, speed)\r\n  },\r\n  _turn: function(angle, direction, speed) {\r\n    var direction = direction ? 1 : -1\r\n    if (speed) {\r\n      if (this.startAngle < angle) {\r\n        this.mesh.rotation.y += speed\r\n        this.startAngle += speed\r\n        if (angle - this.startAngle < speed) {\r\n          var originAngle = this.mesh.rotation.y - this.startAngle\r\n          this.mesh.rotation.y = originAngle + angle\r\n          this.startAngle = 0\r\n          return\r\n        }\r\n      }\r\n    } else {\r\n      this.mesh.rotation.y += angle * direction\r\n    }\r\n  },\r\n  _moving: function(speed, direction) {\r\n    var rotation = this.mesh.rotation.y\r\n    var direction = direction ? 1 : -1\r\n    var xLength = speed * Math.cos(rotation) * direction,\r\n      zLength = speed * Math.sin(rotation) * direction\r\n    this.mesh.position.x += xLength\r\n    this.mesh.position.z -= zLength\r\n    this._rotateWheels(speed)\r\n  },\r\n  _rotateWheels: function(speed) {\r\n    this.wheels.forEach(function(elem) {\r\n      elem.rotation.z -= 0.1 * speed\r\n    })\r\n  }\r\n}\r\n\r\nexport default Car\n\n\n// WEBPACK FOOTER //\n// ./src/pages/mini-city/js/Car.js","var textures = {\r\n  window: function() {\r\n    var canvas = document.createElement('canvas');\r\n    var ctx = canvas.getContext('2d');\r\n\r\n    canvas.width = 32\r\n    canvas.height = 32\r\n\r\n    var colors = {\r\n      border: '#3c3443',\r\n      top: '#9d94a7',\r\n      bottom: '#796e8c'\r\n    }\r\n\r\n    ctx.fillStyle = colors.border\r\n    ctx.fillRect(0, 0, 32, 32)\r\n    ctx.fillStyle = colors.top\r\n    ctx.fillRect(2, 2, 13, 13)\r\n    ctx.fillStyle = colors.top\r\n    ctx.fillRect(17, 2, 13, 13)\r\n    ctx.fillStyle = colors.bottom\r\n    ctx.fillRect(2, 17, 13, 13)\r\n    ctx.fillStyle = colors.bottom\r\n    ctx.fillRect(17, 17, 13, 13)\r\n\r\n    var canvasTexture = new THREE.Texture(canvas);\r\n    canvasTexture.wrapS = THREE.RepeatWrapping;\r\n    canvasTexture.wrapT = THREE.RepeatWrapping;\r\n    canvasTexture.needsUpdate = true;\r\n\r\n    return canvasTexture;\r\n  }\r\n}\r\n\r\nexport default textures;\n\n\n// WEBPACK FOOTER //\n// ./src/pages/mini-city/js/textures.js","<template>\n    <div class=\"container\">\n        <a class=\"title\" href=\"https://github.com/luosijie/threejs-examples\" target=\"_blank\">\n            Mini City\n        </a>\n        <a class=\"author\" href=\"https://luosijie.github.io/\" target=\"_blank\">\n            Created By Jesse Luo\n        </a>\n    </div>\n</template>\n<script>\nimport Car from \"./js/Car\";\nimport textures from \"./js/textures.js\";\nimport utils from \"./js/utils.js\";\nexport default {\n    name: 'HelloWorld',\n    data() {\n        return {\n            workList: [\n                { link: '', img: '' },\n                { link: '/mini-city', img: '/static/img/threejs-example-mini-city.png' },\n                { link: '', img: '' },\n                { link: '/jump', img: '/static/img/threejs-example-jump.png' },\n                { link: '', img: '' },\n                { link: '/mall', img: '/static/img/threejs-example-mall.png' }\n            ]\n        }\n    },\n    mounted() {\n        var scene, camera\n        var renderer\n        var width, height\n\n        var cars = []\n        // var stats\n\n        var config = {\n            isMobile: false,\n            background: 0x282828\n        }\n\n        width = window.innerWidth\n        height = window.innerHeight\n\n        scene = new THREE.Scene()\n        camera = new THREE.PerspectiveCamera(45, width / height, 1, 5000)\n        camera.position.set(330, 330, 330)\n        camera.lookAt(scene.position)\n\n        renderer = new THREE.WebGLRenderer({ antialias: true })\n        renderer.setSize(width, height)\n        renderer.setClearColor(config.background)\n        renderer.shadowMap.enabled = true\n        renderer.shadowMap.type = THREE.PCFSoftShadowMap\n        document.body.appendChild(renderer.domElement)\n\n        checkUserAgent()\n\n        buildAuxSystem()\n        buildLightSystem()\n        buildbuilding()\n        buildRoad()\n        buildStaticCars()\n        buildMovingCars()\n\n        loop()\n        onWindowResize()\n\n        function checkUserAgent() {\n            var n = navigator.userAgent;\n            if (n.match(/Android/i) || n.match(/webOS/i) || n.match(/iPhone/i) || n.match(/iPad/i) || n.match(/iPod/i) || n.match(/BlackBerry/i)) {\n                config.isMobile = true\n                camera.position.set(420, 420, 420)\n                renderer.shadowMap.enabled = false\n            }\n        }\n\n        function buildMovingCars() {\n            var carsPosition = [\n                [-130, 145, 0],\n                [10, 145, 0],\n                [145, 20, 0.5],\n                [30, -145, 1],\n                [-145, -60, 1.5]\n            ]\n            carsPosition.forEach(function(elem) {\n                var car = new Car()\n                var x = elem[0],\n                    z = elem[1],\n                    r = elem[2]\n                car.setPosition(x, 0, z)\n                car.mesh.rotation.y = r * Math.PI\n                cars.push(car)\n                scene.add(car.mesh)\n            })\n        }\n\n        function buildStaticCars() {\n            var carsPosition = [\n                [-84, 82, 1.5],\n                [-58, 82, 1.5],\n                [-32, 82, 1.5],\n                [84, 82, 1.5]\n            ]\n            carsPosition.forEach(function(elem) {\n                var car = new Car()\n                var x = elem[0],\n                    z = elem[1],\n                    r = elem[2]\n                car.setPosition(x, 0, z)\n                car.mesh.rotation.y = r * Math.PI\n                scene.add(car.mesh)\n            })\n        }\n\n        function buildRoad() {\n            var road = new THREE.Object3D()\n            var roadColor = 0xffffff\n            var roadBorderOuterCoords = [\n                [-160, 160],\n                [160, 160],\n                [160, -160],\n                [-160, -160],\n            ]\n            var roadBorderOuterHoleCoords = [\n                [-159, 159],\n                [-159, -159],\n                [159, -159],\n                [159, 159]\n            ]\n            var roadBorderOuterShape = utils.makeShape(roadBorderOuterCoords, roadBorderOuterHoleCoords)\n            var roadBorderOuterGeometry = utils.makeExtrudeGeometry(roadBorderOuterShape, 0.1)\n            var roadBorderOuter = utils.makeMesh('phong', roadBorderOuterGeometry, roadColor)\n            road.add(roadBorderOuter)\n\n            var roadBorderInnerCoords = [\n                [-131, 131],\n                [-131, -131],\n                [131, -131],\n                [131, 131],\n                [19, 131],\n                [19, 99],\n                [99, 99],\n                [99, -99],\n                [-99, -99],\n                [-99, 99],\n                [-19, 99],\n                [-19, 131]\n            ]\n            var roadBorderInnerShape = utils.makeShape(roadBorderInnerCoords)\n            var roadBorderInnnerGeometry = utils.makeExtrudeGeometry(roadBorderInnerShape, 0.1)\n            var roadBoaderInnder = utils.makeMesh('phong', roadBorderInnnerGeometry, roadColor)\n            roadBoaderInnder.rotation.y = Math.PI\n            road.add(roadBoaderInnder)\n\n            var roadLinesGeometry = new THREE.Geometry()\n            var roadLineGeometry = new THREE.BoxGeometry(20, 0.1, 2)\n\n            var roadLinesBottomGeometry = new THREE.Geometry()\n            for (var i = 0; i < 9; i++) {\n                var geometry = roadLineGeometry.clone()\n                geometry.translate(i * 30, 0, -1)\n                roadLinesBottomGeometry.merge(geometry)\n            }\n            roadLinesBottomGeometry.translate(-120, 0, 145)\n            roadLinesGeometry.merge(roadLinesBottomGeometry)\n\n            var roadLinesTopGeometry = roadLinesBottomGeometry.clone()\n            roadLinesTopGeometry.translate(0, 0, -290)\n            roadLinesGeometry.merge(roadLinesTopGeometry)\n\n            var roadLinesLeftGeometry = roadLinesBottomGeometry.clone()\n            roadLinesLeftGeometry.rotateY(0.5 * Math.PI)\n            roadLinesGeometry.merge(roadLinesLeftGeometry)\n\n            var roadLinesRightGeometry = roadLinesBottomGeometry.clone()\n            roadLinesRightGeometry.rotateY(-0.5 * Math.PI)\n            roadLinesGeometry.merge(roadLinesRightGeometry)\n            roadLinesGeometry = new THREE.BufferGeometry().fromGeometry(roadLinesGeometry)\n            var roadLines = utils.makeMesh('phong', roadLinesGeometry, roadColor)\n            road.add(roadLines)\n\n            scene.add(road)\n        }\n\n        function buildbuilding() {\n            var planeGeometry = new THREE.BoxBufferGeometry(320, 6, 320)\n            var plane = utils.makeMesh('lambert', planeGeometry, 0x6f5f6a)\n            plane.position.y = -3\n            scene.add(plane)\n\n            addFense()\n            addGreen()\n            addTrees()\n            addHospital()\n            addLamps()\n\n            function addLamps() {\n                var lampsPosition = [\n                    [-12.5, 12.5, 1.25],\n                    [-7.5, 12.5, -0.5],\n                    [-2.5, 12.5, -0.5],\n                    [2.5, 12.5, -0.5],\n                    [7.5, 12.5, -0.5],\n                    [12.5, 12.5, -0.25],\n                    [12.5, 7.5, 0],\n                    [12.5, 2.5, 0],\n                    [12.5, -2.5, 0],\n                    [12.5, -7.5, 0],\n                    [12.5, -12.5, 0.25],\n                    [7.5, -12.5, 0.5],\n                    [2.5, -12.5, 0.5],\n                    [-2.5, -12.5, 0.5],\n                    [-7.5, -12.5, 0.5],\n                    [-12.5, -12.5, 0.75],\n                    [-12.5, -7.5, 1],\n                    [-12.5, -2.5, 1],\n                    [-12.5, 2.5, 1],\n                    [-12.5, 7.5, 1],\n                ]\n\n                lampsPosition.forEach(function(elem) {\n                    var x = elem[0] * 10,\n                        z = elem[1] * 10,\n                        r = elem[2]\n                    var lamp = createLamp()\n                    lamp.rotation.y = r * Math.PI\n                    lamp.position.set(x, 0, z)\n                    scene.add(lamp)\n                })\n            }\n\n            function addHospital() {\n                var hospital = createHospital()\n                hospital.position.z = -20\n                scene.add(hospital)\n            }\n\n            function addGreen() {\n                var greenCoords = [\n                    [-120, -120],\n                    [-120, 120],\n                    [120, 120],\n                    [120, -120],\n                    [20, -120],\n                    [20, -100],\n                    [100, -100],\n                    [100, 100],\n                    [-100, 100],\n                    [-100, -100],\n                    [-20, -100],\n                    [-20, -120],\n                    [-120, -120]\n                ]\n                var greenShape = utils.makeShape(greenCoords)\n\n                var greenGeometry = utils.makeExtrudeGeometry(greenShape, 3)\n                var green = utils.makeMesh('lambert', greenGeometry, 0xc0c06a)\n                scene.add(green)\n            }\n\n            function addFense() {\n                var fenseCoords = [\n                    [-130, -130],\n                    [-130, 130],\n                    [130, 130],\n                    [130, -130],\n                    [20, -130],\n                    [20, -120],\n                    [120, -120],\n                    [120, 120],\n                    [-120, 120],\n                    [-120, -120],\n                    [-20, -120],\n                    [-20, -130],\n                    [-130, -130]\n                ]\n                var fenseShape = utils.makeShape(fenseCoords)\n\n                var fenseGeometry = utils.makeExtrudeGeometry(fenseShape, 3)\n                var fense = utils.makeMesh('lambert', fenseGeometry, 0xe5cabf)\n                scene.add(fense)\n            }\n\n            function addTrees() {\n                var treesPosition = [\n                    [-110, -110],\n                    [-90, -110],\n                    [-70, -110],\n                    [-50, -110],\n                    [-30, -110],\n                    [-10, -110],\n                    [10, -110],\n                    [30, -110],\n                    [50, -110],\n                    [70, -110],\n                    [90, -110],\n                    [-110, 110],\n                    [-110, 90],\n                    [-110, 70],\n                    [-110, 50],\n                    [-110, 30],\n                    [-110, 10],\n                    [-110, -10],\n                    [-110, -30],\n                    [-110, -50],\n                    [-110, -70],\n                    [-110, -90],\n                    [110, 110],\n                    [90, 110],\n                    [70, 110],\n                    [50, 110],\n                    [30, 110],\n                    [-30, 110],\n                    [-50, 110],\n                    [-70, 110],\n                    [-90, 110],\n                    [110, -110],\n                    [110, -90],\n                    [110, -70],\n                    [110, -50],\n                    [110, -30],\n                    [110, -10],\n                    [110, 10],\n                    [110, 30],\n                    [110, 50],\n                    [110, 70],\n                    [110, 90],\n                ]\n                treesPosition.forEach(function(elem) {\n                    var x = elem[0],\n                        y = 1,\n                        z = elem[1]\n                    var tree = createTree(x, y, z)\n                    scene.add(tree)\n                })\n            }\n\n            function createLamp() {\n                var lamp = new THREE.Object3D()\n                var pillarGeomertry = new THREE.CubeGeometry(2, 30, 2)\n                pillarGeomertry.translate(0, 15, 0)\n                var pillar = utils.makeMesh('phong', pillarGeomertry, 0xebd1c2)\n                lamp.add(pillar)\n\n                var connectGeometry = new THREE.CubeGeometry(10, 1, 1)\n                var connect = utils.makeMesh('phong', connectGeometry, 0x2c0e0e)\n                connect.position.set(3, 30, 0)\n                lamp.add(connect)\n\n                var lightGeometry = new THREE.CubeGeometry(6, 2, 4)\n                var light\n                light = utils.makeMesh('phong', lightGeometry, 0xebd1c2)\n                light.position.set(10, 30, 0)\n                lamp.add(light)\n\n                return lamp\n            }\n\n            function createHospital() {\n                var hospital = new THREE.Object3D()\n\n                var baseGeometry = new THREE.BoxBufferGeometry(180, 3, 140)\n                var base = utils.makeMesh('lambert', baseGeometry, 0xffffff)\n                base.position.y = 1\n                hospital.add(base)\n\n                var frontMainCoords = [\n                    [-80, -30],\n                    [-80, 20],\n                    [50, 20],\n                    [50, 0],\n                    [20, -30],\n                    [-80, -30]\n                ]\n                var frontMainShape = utils.makeShape(frontMainCoords)\n                var frontMainGeometry = utils.makeExtrudeGeometry(frontMainShape, 100)\n                var frontMainMaterial = new THREE.MeshPhongMaterial({ map: textures.window() })\n                frontMainMaterial.map.repeat.set(0.1, 0.08)\n                var frontMain = new THREE.Mesh(frontMainGeometry, frontMainMaterial)\n                frontMain.castShadow = true\n                frontMain.receiveShadow = true\n                hospital.add(frontMain)\n\n                var frontTopShape = frontMainShape\n                var frontTopGeometry = utils.makeExtrudeGeometry(frontTopShape, 5)\n                var frontTop = utils.makeMesh('lambert', frontTopGeometry, 0xb1a7af)\n                frontTop.position.y = 100\n                hospital.add(frontTop)\n\n                var frontRoofShelfGeometry = new THREE.Geometry()\n                var frontRoofShelfCubeGeometry = new THREE.BoxGeometry(2, 2, 40)\n                // for z-axis\n                for (var i = 0; i < 12; i++) {\n                    var geometry = frontRoofShelfCubeGeometry.clone()\n                    geometry.translate(i * 5, 0, 0)\n                    frontRoofShelfGeometry.merge(geometry)\n                }\n                // for x-axis\n                for (var i = 0; i < 2; i++) {\n                    var geometry = frontRoofShelfCubeGeometry.clone()\n                    geometry.rotateY(0.5 * Math.PI)\n                    geometry.scale(1.6, 1, 1)\n                    geometry.translate(27, 0, -15 + i * 30)\n                    frontRoofShelfGeometry.merge(geometry)\n                }\n                // for y-axis\n                var frontRoofShelfCubeYPosition = [\n                    [0, 0],\n                    [1, 0],\n                    [0, 1],\n                    [1, 1]\n                ]\n                for (var i = 0; i < frontRoofShelfCubeYPosition.length; i++) {\n                    var p = frontRoofShelfCubeYPosition[i]\n                    var geometry = frontRoofShelfCubeGeometry.clone()\n                    geometry.scale(1, 1, 0.4)\n                    geometry.rotateX(0.5 * Math.PI)\n                    geometry.translate(p[0] * 55, 0, -15 + p[1] * 30)\n                    frontRoofShelfGeometry.merge(geometry)\n                }\n                frontRoofShelfGeometry = new THREE.BufferGeometry().fromGeometry(frontRoofShelfGeometry)\n                var frontRoofShelf = utils.makeMesh('phong', frontRoofShelfGeometry, 0xffffff)\n                frontRoofShelf.position.set(-70, 115, 5)\n                hospital.add(frontRoofShelf)\n\n                var frontPlatGeometry = new THREE.BoxBufferGeometry(150, 3, 90)\n                var fronPlat = utils.makeMesh('lambert', frontPlatGeometry, 0x0792a5)\n                fronPlat.position.set(-3, 18, 25)\n                hospital.add(fronPlat)\n\n                var frontPlatVerticalGeometry = new THREE.BoxBufferGeometry(150, 15, 3)\n                var frontPlatVertical = utils.makeMesh('phong', frontPlatVerticalGeometry, 0x0792a5)\n                frontPlatVertical.receiveShadow = false\n                frontPlatVertical.position.set(-3, 24, 68.5)\n                hospital.add(frontPlatVertical)\n\n                var frontPlatVerticalWhiteGeometry = new THREE.BoxBufferGeometry(150, 3, 3)\n                var frontPlatVerticalWhite = utils.makeMesh('phong', frontPlatVerticalWhiteGeometry, 0xffffff)\n                frontPlatVerticalWhite.position.set(-3, 33, 68.5)\n                hospital.add(frontPlatVerticalWhite)\n\n                var frontPlatPillarGeometry = new THREE.CylinderGeometry(2, 2, 15, 32)\n                var frontPlatPillar = utils.makeMesh('lambert', frontPlatPillarGeometry, 0xffffff)\n                frontPlatPillar.position.set(-60, 10, 55)\n                hospital.add(frontPlatPillar)\n\n                var frontPlatPillar2 = frontPlatPillar.clone()\n                frontPlatPillar2.position.set(55, 10, 55)\n                hospital.add(frontPlatPillar2)\n\n                var frontBorderVerticles = new THREE.Object3D()\n                var frontBorderVerticleGeometry = new THREE.BoxBufferGeometry(4, 106, 4)\n                var frontBorderVerticleMesh = utils.makeMesh('phong', frontBorderVerticleGeometry, 0xffffff)\n                var frontBorderVerticle1 = frontBorderVerticleMesh.clone()\n                frontBorderVerticle1.position.set(-80, 52, 30)\n                frontBorderVerticles.add(frontBorderVerticle1)\n                var frontBorderVerticle2 = frontBorderVerticleMesh.clone()\n                frontBorderVerticle2.position.set(-80, 52, -20)\n                frontBorderVerticles.add(frontBorderVerticle2)\n                var frontBorderVerticle3 = frontBorderVerticleMesh.clone()\n                frontBorderVerticle3.position.set(50, 52, -18)\n                frontBorderVerticles.add(frontBorderVerticle3)\n                hospital.add(frontBorderVerticles)\n\n                var frontRoofCoords = [\n                    [-82, -32],\n                    [20, -32],\n                    [52, 0],\n                    [52, 22],\n                    [-82, 22],\n                    [-82, -32]\n                ]\n                var frontRoofHolePath = [\n                    [-78, -28],\n                    [20, -28],\n                    [48, 0],\n                    [48, 18],\n                    [-78, 18],\n                    [-78, -28]\n                ]\n                var frontRoofShape = utils.makeShape(frontRoofCoords, frontRoofHolePath)\n                var frontRoofGeometry = utils.makeExtrudeGeometry(frontRoofShape, 8)\n                var frontRoof = utils.makeMesh('phong', frontRoofGeometry, 0xffffff)\n                frontRoof.position.y = 100\n                hospital.add(frontRoof)\n\n                var backMainCoords = [\n                    [-80, 20],\n                    [-80, 60],\n                    [80, 60],\n                    [80, 20],\n                    [-80, 20]\n                ]\n                var backMainHolePath = [\n                    [-78, 22],\n                    [78, 22],\n                    [78, 58],\n                    [-78, 58],\n                    [-78, 22]\n                ]\n                var backMainShape = utils.makeShape(backMainCoords, backMainHolePath)\n\n                var backMainGeometry = utils.makeExtrudeGeometry(backMainShape, 90)\n                var backMain = utils.makeMesh('lambert', backMainGeometry, 0xf2e21b)\n                hospital.add(backMain)\n\n                var backMiddleCoords = [\n                    [0, 0],\n                    [36, 0],\n                    [36, 70],\n                    [0, 70],\n                    [0, 0]\n                ]\n                var backMiddleHolePath = [\n                    [2, 2],\n                    [34, 2],\n                    [34, 68],\n                    [2, 68],\n                    [2, 2]\n                ]\n                var backMiddleShape = utils.makeShape(backMiddleCoords, backMiddleHolePath)\n                var backMiddkeGeometry = utils.makeExtrudeGeometry(backMiddleShape, 165)\n                var backMiddle = utils.makeMesh('lambert', backMiddkeGeometry, 0xffffff)\n\n                backMiddle.rotation.x = -0.5 * Math.PI\n                backMiddle.rotation.z = -0.5 * Math.PI\n                backMiddle.position.y = 86\n                backMiddle.position.z = -58\n                backMiddle.position.x = -78\n                hospital.add(backMiddle)\n\n                var backMiddleWindowGeometry = new THREE.PlaneGeometry(32, 66, 1, 1)\n                var backMiddleWindowMaterial = new THREE.MeshPhongMaterial({ map: textures.window() })\n                backMiddleWindowMaterial.map.repeat.set(2, 6)\n\n                var backMiddleWindow = new THREE.Mesh(backMiddleWindowGeometry, backMiddleWindowMaterial)\n                backMiddleWindow.position.set(83, 51, -40)\n                backMiddleWindow.rotation.y = 0.5 * Math.PI\n                hospital.add(backMiddleWindow)\n\n                var windowBackOrigin = createWindow()\n                windowBackOrigin.scale.set(0.6, 0.6, 1)\n                windowBackOrigin.rotation.y = Math.PI\n                windowBackOrigin.position.set(65, 75, -61)\n                for (var i = 0; i < 7; i++) {\n                    for (var j = 0; j < 4; j++) {\n                        var windowObj = windowBackOrigin.clone()\n                        windowObj.position.x -= i * 22\n                        windowObj.position.y -= j * 20\n                        hospital.add(windowObj)\n                    }\n                }\n\n                return hospital\n            }\n\n            function createWindow() {\n                var windowObj = new THREE.Object3D()\n                var glassGeometry = new THREE.PlaneGeometry(20, 20)\n                var glass = utils.makeMesh('phong', glassGeometry, 0x6a5e74)\n                windowObj.add(glass)\n\n                var windowBorderGeometry = new THREE.BoxBufferGeometry(22, 2, 2)\n                var windowBorder = utils.makeMesh('phong', windowBorderGeometry, 0xffffff)\n\n                var windowBorderTop = windowBorder.clone()\n                windowBorderTop.position.y = 10\n                windowObj.add(windowBorderTop)\n\n                var windowBorderBottom = windowBorder.clone()\n                windowBorderBottom.position.y = -10\n                windowObj.add(windowBorderBottom)\n\n                var windowBorderLeft = windowBorder.clone()\n                windowBorderLeft.rotation.z = 0.5 * Math.PI\n                windowBorderLeft.position.x = -10\n                windowObj.add(windowBorderLeft)\n\n                var windowBorderRight = windowBorderLeft.clone()\n                windowBorderRight.position.x = 10\n                windowObj.add(windowBorderRight)\n\n                return windowObj\n            }\n\n            function createTree(x, y, z) {\n                var x = x || 0\n                var y = y || 0\n                var z = z || 0\n\n                var tree = new THREE.Object3D()\n\n                var treeTrunkGeometry = new THREE.BoxBufferGeometry(2, 16, 2)\n                var treeTrunk = utils.makeMesh('lambert', treeTrunkGeometry, 0x8a613a)\n                treeTrunk.position.y = 8\n                tree.add(treeTrunk)\n\n                var treeLeafsGeometry = new THREE.BoxBufferGeometry(8, 8, 8)\n                var treeLeafs = utils.makeMesh('lambert', treeLeafsGeometry, 0x9c9e5d)\n                treeLeafs.position.y = 13\n                tree.add(treeLeafs)\n\n                tree.position.set(x, y, z)\n\n                return tree\n            }\n        }\n\n        function buildLightSystem() {\n\n            if (!config.isMobile) {\n                var directionalLight = new THREE.DirectionalLight(0xffffff, 1.1);\n                directionalLight.position.set(300, 1000, 500);\n                directionalLight.target.position.set(0, 0, 0);\n                directionalLight.castShadow = true;\n\n                var d = 300;\n                directionalLight.shadow.camera = new THREE.OrthographicCamera(-d, d, d, -d, 500, 1600);\n                directionalLight.shadow.bias = 0.0001;\n                directionalLight.shadow.mapSize.width = directionalLight.shadow.mapSize.height = 1024;\n                scene.add(directionalLight)\n\n                var light = new THREE.AmbientLight(0xffffff, 0.3)\n                scene.add(light)\n            } else {\n                var hemisphereLight = new THREE.HemisphereLight(0xffffff, 1)\n                scene.add(hemisphereLight)\n\n                var light = new THREE.AmbientLight(0xffffff, 0.15)\n                scene.add(light)\n            }\n\n        }\n\n        function buildAuxSystem() {\n            // stats = new Stats()\n            // stats.setMode(0)\n            // stats.domElement.style.position = 'absolute'\n            // stats.domElement.style.left = '5px'\n            // stats.domElement.style.top = '5px'\n            // document.body.appendChild(stats.domElement)\n\n            // var axisHelper = new THREE.AxesHelper(200)\n            // scene.add(axisHelper)\n\n            var gridHelper = new THREE.GridHelper(320, 32)\n            scene.add(gridHelper)\n\n            var controls = new THREE.OrbitControls(camera, renderer.domElement)\n            controls.enableDamping = true\n            controls.dampingFactor = 0.25\n            controls.rotateSpeed = 0.35\n        }\n\n        function carMoving(car) {\n            var angle = car.mesh.rotation.y\n            var x = car.mesh.position.x,\n                z = car.mesh.position.z\n\n            if (x < 145 && z === 145) {\n                car.forward()\n            } else if (angle < 0.5 * Math.PI) {\n                car.turnLeft(0.5 * Math.PI, 0.1)\n            } else if (x === 145 && z > -145) {\n                car.forward()\n            } else if (angle < Math.PI) {\n                car.turnLeft(0.5 * Math.PI, 0.1)\n            } else if (x > -145 && z == -145) {\n                car.forward()\n            } else if (angle < 1.5 * Math.PI) {\n                car.turnLeft(0.5 * Math.PI, 0.1)\n            } else if (x === -145 && z < 145) {\n                car.mesh.rotation.y = 1.5 * Math.PI\n                car.forward()\n            } else if (angle < 2 * Math.PI) {\n                car.turnLeft(0.5 * Math.PI, 0.1)\n            } else {\n                car.setPosition(-145, 0, 145)\n                car.mesh.rotation.set(0, 0, 0)\n            }\n        }\n\n        function loop() {\n            // stats.update()\n            cars.forEach(function(car) {\n                carMoving(car)\n            })\n            renderer.render(scene, camera)\n            requestAnimationFrame(loop)\n        }\n\n        function onWindowResize() {\n            window.addEventListener('resize', function() {\n                width = window.innerWidth\n                height = window.innerHeight\n\n                camera.aspect = width / height;\n                camera.updateProjectionMatrix()\n\n                renderer.setSize(width, height)\n            })\n        }\n    }\n}\n\n</script>\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style lang=\"scss\" scoped>\n.container {\n    margin: 20px 0;\n    position: absolute;\n    text-align: center;\n    opacity: 0.2;\n    width: 100%;\n    a {\n        display: block;\n        font-size: 16px;\n        line-height: 28px;\n        color: #ffffff;\n        text-decoration: none;\n    }\n}\n\na.title {\n    font-size: 20px;\n    font-weight: bold;\n}\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/pages/mini-city/index.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"container\"},[_c('a',{staticClass:\"title\",attrs:{\"href\":\"https://github.com/luosijie/threejs-examples\",\"target\":\"_blank\"}},[_vm._v(\"\\n        Mini City\\n    \")]),_vm._v(\" \"),_c('a',{staticClass:\"author\",attrs:{\"href\":\"https://luosijie.github.io/\",\"target\":\"_blank\"}},[_vm._v(\"\\n        Created By Jesse Luo\\n    \")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-320bbcfe\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/pages/mini-city/index.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-320bbcfe\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./index.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-320bbcfe\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./index.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-320bbcfe\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/mini-city/index.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}