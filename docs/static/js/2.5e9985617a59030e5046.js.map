{"version":3,"sources":["webpack:///./src/pages/mini-city/js/utils.js","webpack:///./src/pages/mini-city/js/Car.js","webpack:///./src/pages/mini-city/js/textures.js","webpack:///./src/pages/mini-city/config/treesPosition.js","webpack:///src/pages/mini-city/index.vue","webpack:///./src/pages/mini-city/index.vue?482e","webpack:///./src/pages/mini-city/index.vue"],"names":["js_utils","makeShape","shape","window","THREE","arguments","length","arry","Shape","moveTo","i","lineTo","pathCoords","path","Path","holes","push","console","error","makeExtrudeGeometry","amount","extrudeSetting","steps","bevelEnabled","geometry","ExtrudeBufferGeometry","rotateX","Math","PI","makeShapeGeometry","shapeCoords","this","ShapeGeometry","makeMesh","type","color","material","mesh","MeshLambertMaterial","MeshPhongMaterial","Mesh","castShadow","receiveShadow","Car_Car","colors","index","floor","random","Object3D","wheels","startAngle","that","makeWindow","coords","carBodyShape","carBodyGeometry","translate","carBody","add","addBody","carWindows","carWindowLeft","carWindowLeftFront","carWindowLeftBack","position","z","carWindowRight","clone","carWindowFrontGeometry","CubeGeometry","rotateZ","carWindowFront","carWindowBack","rotation","x","y","addWindows","carLightsGeometry","Geometry","carLigetGeometry","BoxGeometry","forEach","elem","merge","carLightFrontGeometry","scale","carLightBackGeometry","BufferGeometry","fromGeometry","carLights","addLights","wheelFrontLeft","createWheel","set","wheelFrontRight","wheelBackLeft","wheelBackRight","wheel","wheelOuterGeometry","CylinderGeometry","wheelOuter","wheelInner","wheelCenterGeometry","wheelCenter","addWheels","prototype","setPosition","forward","speed","_moving","backward","turnLeft","angle","_turn","turnRight","direction","originAngle","xLength","cos","zLength","sin","_rotateWheels","js_Car","js_textures","canvas","document","createElement","ctx","getContext","width","height","fillStyle","fillRect","canvasTexture","Texture","wrapS","RepeatWrapping","wrapT","needsUpdate","config_treesPosition","mini_city","name","data","scene","camera","renderer","cars","config","isMobile","background","methods","checkUserAgent","n","navigator","userAgent","match","shadowMap","enabled","buildMovingCars","_this2","car","r","buildStaticCars","_this3","buildRoad","road","roadBorderOuterShape","roadBorderOuterGeometry","roadBorderOuter","roadBorderInnerShape","roadBorderInnnerGeometry","roadBoaderInnder","roadLinesGeometry","roadLineGeometry","roadLinesBottomGeometry","roadLinesTopGeometry","roadLinesLeftGeometry","rotateY","roadLinesRightGeometry","roadLines","buildbuilding","fenseShape","fenseGeometry","fense","greenShape","greenGeometry","green","hospital","_this","planeGeometry","BoxBufferGeometry","plane","tree","treeTrunkGeometry","treeTrunk","treeLeafsGeometry","treeLeafs","createTree","baseGeometry","base","frontMainShape","frontMainGeometry","frontMainMaterial","map","repeat","frontMain","frontTopShape","frontTopGeometry","frontTop","frontRoofShelfGeometry","frontRoofShelfCubeGeometry","_i","_geometry","frontRoofShelfCubeYPosition","_i2","p","_geometry2","frontRoofShelf","frontPlatGeometry","fronPlat","frontPlatVerticalGeometry","frontPlatVertical","frontPlatVerticalWhiteGeometry","frontPlatVerticalWhite","frontPlatPillarGeometry","frontPlatPillar","frontPlatPillar2","frontBorderVerticles","frontBorderVerticleGeometry","frontBorderVerticleMesh","frontBorderVerticle1","frontBorderVerticle2","frontBorderVerticle3","frontRoofShape","frontRoofGeometry","frontRoof","backMainShape","backMainGeometry","backMain","backMiddleShape","backMiddkeGeometry","backMiddle","backMiddleWindowGeometry","PlaneGeometry","backMiddleWindowMaterial","backMiddleWindow","windowBackOrigin","windowObj","glassGeometry","glass","windowBorderGeometry","windowBorder","windowBorderTop","windowBorderBottom","windowBorderLeft","windowBorderRight","createWindow","_i3","j","createHospital","lamp","pillarGeomertry","pillar","connectGeometry","connect","lightGeometry","light","createLamp","buildLightSystem","hemisphereLight","HemisphereLight","_light","AmbientLight","directionalLight","DirectionalLight","target","d","shadow","OrthographicCamera","bias","mapSize","buildAuxSystem","gridHelper","GridHelper","controls","OrbitControls","domElement","enableDamping","dampingFactor","rotateSpeed","carMoving","onWindowResize","_this4","addEventListener","innerWidth","innerHeight","aspect","updateProjectionMatrix","setSize","loop","_this5","render","requestAnimationFrame","mounted","Scene","PerspectiveCamera","lookAt","WebGLRenderer","antialias","querySelector","setClearColor","PCFSoftShadowMap","pages_mini_city","$createElement","_self","_c","_m","staticRenderFns","_h","staticClass","attrs","href","_v","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/2.5e9985617a59030e5046.js","sourcesContent":["let utils = {\r\n    makeShape: function() {\r\n        let shape\r\n        if (window.THREE && arguments.length) {\r\n            let arry = arguments[0]\r\n            shape = new THREE.Shape()\r\n            shape.moveTo(arry[0][0], arry[0][1])\r\n            for (let i = 1; i < arry.length; i++) {\r\n                shape.lineTo(arry[i][0], arry[i][1])\r\n            }\r\n            if (arguments.length > 1) {\r\n                for (let i = 1; i < arguments.length; i++) {\r\n                    let pathCoords = arguments[i]\r\n                    let path = new THREE.Path()\r\n                    path.moveTo(pathCoords[0][0], pathCoords[0][1])\r\n                    for (let i = 1; i < pathCoords.length; i++) {\r\n                        path.lineTo(pathCoords[i][0], pathCoords[i][1])\r\n                    }\r\n                    shape.holes.push(path)\r\n                }\r\n            }\r\n            return shape\r\n        } else {\r\n            console.error('Something wrong!')\r\n        }\r\n    },\r\n    makeExtrudeGeometry: function(shape, amount) {\r\n        let extrudeSetting = {\r\n            steps: 1,\r\n            amount: amount,\r\n            bevelEnabled: false\r\n        }\r\n        let geometry = new THREE.ExtrudeBufferGeometry(shape, extrudeSetting)\r\n        geometry.rotateX(-0.5 * Math.PI)\r\n        return geometry\r\n    },\r\n    makeShapeGeometry: function(shapeCoords) {\r\n        let shape = this.makeShape(shapeCoords)\r\n        let geometry = new THREE.ShapeGeometry(shape)\r\n        return geometry\r\n    },\r\n    makeMesh: function(type, geometry, color) {\r\n        let material\r\n        let mesh\r\n        if (type === 'lambert') {\r\n            material = new THREE.MeshLambertMaterial({ color: color })\r\n        } else if (type === 'phong') {\r\n            material = new THREE.MeshPhongMaterial({ color: color })\r\n        } else {\r\n            console.error('unrecognized type!')\r\n        }\r\n\r\n        mesh = new THREE.Mesh(geometry, material)\r\n\r\n        mesh.castShadow = true\r\n        mesh.receiveShadow = true\r\n\r\n        return mesh\r\n\r\n    }\r\n}\r\n\r\nexport default utils\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/mini-city/js/utils.js","'use strict'\r\nimport utils from './utils.js';\r\nconst Car = function(color) {\r\n    let colors = [0x2cbab2, 0x47a700, 0xd60000, 0x087f87, 0x37ad0e, 0x4d4d4d, 0xce7e00, 0xe0a213, 0x87bcde]\r\n    let index = Math.floor(Math.random() * colors.length)\r\n\r\n    this.color = color || colors[index]\r\n    this.mesh = new THREE.Object3D()\r\n    this.wheels = []\r\n    this.startAngle = 0\r\n\r\n    let that = this\r\n    addBody()\r\n    addWindows()\r\n    addLights()\r\n    addWheels()\r\n\r\n    function addWheels() {\r\n        let wheelFrontLeft = createWheel()\r\n        wheelFrontLeft.position.set(8, 3, -6)\r\n        that.wheels.push(wheelFrontLeft)\r\n        that.mesh.add(wheelFrontLeft)\r\n\r\n        let wheelFrontRight = createWheel()\r\n        wheelFrontRight.position.set(8, 3, 6)\r\n        that.wheels.push(wheelFrontRight)\r\n        that.mesh.add(wheelFrontRight)\r\n\r\n        let wheelBackLeft = createWheel()\r\n        wheelBackLeft.position.set(-8, 3, 6)\r\n        that.wheels.push(wheelBackLeft)\r\n        that.mesh.add(wheelBackLeft)\r\n\r\n        let wheelBackRight = createWheel()\r\n        wheelBackRight.position.set(-8, 3, -6)\r\n        that.wheels.push(wheelBackRight)\r\n        that.mesh.add(wheelBackRight)\r\n\r\n        function createWheel() {\r\n            let wheel = new THREE.Object3D()\r\n\r\n            let wheelOuterGeometry = new THREE.CylinderGeometry(3, 3, 3, 32)\r\n            wheelOuterGeometry.rotateX(0.5 * Math.PI)\r\n            let wheelOuter = utils.makeMesh('lambert', wheelOuterGeometry, 0x000000)\r\n            wheel.add(wheelOuter)\r\n\r\n            let wheelInner = utils.makeMesh('lambert', wheelOuterGeometry, 0xdddddd)\r\n            wheelInner.castShadow = false\r\n            wheelInner.scale.set(0.8, 0.8, 1.1)\r\n            wheel.add(wheelInner)\r\n\r\n            let wheelCenterGeometry = new THREE.CylinderGeometry(1, 1, 3.6, 4)\r\n            wheelCenterGeometry.rotateX(0.5 * Math.PI)\r\n            let wheelCenter = utils.makeMesh('lambert', wheelCenterGeometry, 0xa7a7a7)\r\n            wheelCenter.castShadow = false\r\n            wheel.add(wheelCenter)\r\n\r\n            return wheel\r\n        }\r\n    }\r\n\r\n    function addLights() {\r\n        let carLightsGeometry = new THREE.Geometry()\r\n        let carLigetGeometry = new THREE.BoxGeometry(2, 2, 2)\r\n\r\n        let carLightsPosition = [\r\n            [12.5, 7.1, 6.1],\r\n            [12.5, 7.1, -6.1],\r\n            [-14, 7.1, 6.1],\r\n            [-14, 7.1, -6.1]\r\n        ]\r\n        carLightsPosition.forEach(function(elem) {\r\n            let x = elem[0],\r\n                y = elem[1],\r\n                z = elem[2]\r\n            let geometry = carLigetGeometry.clone()\r\n            geometry.translate(x, y, z)\r\n            carLightsGeometry.merge(geometry)\r\n        })\r\n\r\n        let carLightFrontGeometry = carLigetGeometry.clone()\r\n        carLightFrontGeometry.scale(1, 1.3, 7.1)\r\n        carLightFrontGeometry.translate(12.1, 3.3, 0)\r\n        carLightsGeometry.merge(carLightFrontGeometry)\r\n\r\n        let carLightBackGeometry = carLightFrontGeometry.clone()\r\n        carLightBackGeometry.translate(-26, 0, 0)\r\n        carLightsGeometry.merge(carLightBackGeometry)\r\n\r\n        carLightsGeometry = new THREE.BufferGeometry().fromGeometry(carLightsGeometry)\r\n        let carLights = utils.makeMesh('phong', carLightsGeometry, 0xffffff)\r\n        that.mesh.add(carLights)\r\n\r\n    }\r\n\r\n    function addWindows() {\r\n        let carWindows = new THREE.Object3D()\r\n\r\n        let carWindowLeft = new THREE.Object3D()\r\n        let carWindowLeftFrontCoords = [\r\n            [-2, 8],\r\n            [4, 8],\r\n            [2.5, 12],\r\n            [-2, 12]\r\n        ]\r\n        let carWindowLeftFront = makeWindow(carWindowLeftFrontCoords)\r\n        carWindowLeft.add(carWindowLeftFront)\r\n\r\n        let carWindowLeftBackCoords = [\r\n            [-9, 8],\r\n            [-3, 8],\r\n            [-3, 12],\r\n            [-7.5, 12]\r\n        ]\r\n        let carWindowLeftBack = makeWindow(carWindowLeftBackCoords)\r\n        carWindowLeft.add(carWindowLeftBack)\r\n        carWindowLeft.position.z = 7.1\r\n        carWindows.add(carWindowLeft)\r\n\r\n        let carWindowRight = carWindowLeft.clone()\r\n        carWindowRight.position.z = -7.1\r\n        carWindows.add(carWindowRight)\r\n\r\n        let carWindowFrontGeometry = new THREE.CubeGeometry(0.1, 5, 12)\r\n        carWindowFrontGeometry.rotateZ(0.12 * Math.PI)\r\n        carWindowFrontGeometry.translate(4.2, 10, 0)\r\n        let carWindowFront = utils.makeMesh('phong', carWindowFrontGeometry, 0x000000)\r\n        carWindows.add(carWindowFront)\r\n\r\n        let carWindowBack = carWindowFront.clone()\r\n        carWindowBack.rotation.z = -0.24 * Math.PI\r\n        carWindowBack.position.x = -19\r\n        carWindowBack.position.y = 6\r\n        // carWindowFrontGeometry.translate(4.2,10,7)\r\n        carWindows.add(carWindowBack)\r\n\r\n        that.mesh.add(carWindows)\r\n    }\r\n\r\n    function addBody() {\r\n        let carBodyCoords = [\r\n            [-13, 2],\r\n            [13, 2],\r\n            [13, 8],\r\n            [5, 8],\r\n            [3, 13],\r\n            [-8, 13],\r\n            [-10, 8],\r\n            [-13, 8],\r\n            [-13, 2]\r\n        ]\r\n        let carBodyShape = utils.makeShape(carBodyCoords)\r\n        let carBodyGeometry = utils.makeExtrudeGeometry(carBodyShape, 14)\r\n        carBodyGeometry.translate(0, -7, 0)\r\n        carBodyGeometry.rotateX(0.5 * Math.PI)\r\n        let carBody = utils.makeMesh('phong', carBodyGeometry, that.color)\r\n        that.mesh.add(carBody)\r\n    }\r\n\r\n    function makeWindow(coords) {\r\n        let windowColor = 0x000000\r\n        let shape = utils.makeShape(coords)\r\n        let geometry = utils.makeExtrudeGeometry(shape, 0.1)\r\n        geometry.rotateX(0.5 * Math.PI)\r\n        let mesh = utils.makeMesh('phong', geometry, windowColor)\r\n        mesh.castShadow = false\r\n        return mesh\r\n    }\r\n}\r\nCar.prototype = {\r\n    setPosition: function(x, y, z) {\r\n        this.mesh.position.set(x, y, z)\r\n    },\r\n    forward: function(speed) {\r\n        speed = speed || 1\r\n        this._moving(speed, true)\r\n    },\r\n    backward: function(speed) {\r\n        speed = speed || 1\r\n        this._moving(speed, false)\r\n    },\r\n    turnLeft: function(angle, speed) {\r\n        this._turn(angle, true, speed)\r\n    },\r\n    turnRight: function(angle, speed) {\r\n        this._turn(angle, false, speed)\r\n    },\r\n    _turn: function(angle, direction, speed) {\r\n        direction = direction ? 1 : -1\r\n        if (speed) {\r\n            if (this.startAngle < angle) {\r\n                this.mesh.rotation.y += speed\r\n                this.startAngle += speed\r\n                if (angle - this.startAngle < speed) {\r\n                    let originAngle = this.mesh.rotation.y - this.startAngle\r\n                    this.mesh.rotation.y = originAngle + angle\r\n                    this.startAngle = 0\r\n                    return\r\n                }\r\n            }\r\n        } else {\r\n            this.mesh.rotation.y += angle * direction\r\n        }\r\n    },\r\n    _moving: function(speed, direction) {\r\n        let rotation = this.mesh.rotation.y\r\n        direction = direction ? 1 : -1\r\n        let xLength = speed * Math.cos(rotation) * direction,\r\n            zLength = speed * Math.sin(rotation) * direction\r\n        this.mesh.position.x += xLength\r\n        this.mesh.position.z -= zLength\r\n        this._rotateWheels(speed)\r\n    },\r\n    _rotateWheels: function(speed) {\r\n        this.wheels.forEach(function(elem) {\r\n            elem.rotation.z -= 0.1 * speed\r\n        })\r\n    }\r\n}\r\n\r\nexport default Car\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/mini-city/js/Car.js","let textures = {\r\n    window: function() {\r\n        let canvas = document.createElement('canvas');\r\n        let ctx = canvas.getContext('2d');\r\n\r\n        canvas.width = 32\r\n        canvas.height = 32\r\n\r\n        let colors = {\r\n            border: '#3c3443',\r\n            top: '#9d94a7',\r\n            bottom: '#796e8c'\r\n        }\r\n\r\n        ctx.fillStyle = colors.border\r\n        ctx.fillRect(0, 0, 32, 32)\r\n        ctx.fillStyle = colors.top\r\n        ctx.fillRect(2, 2, 13, 13)\r\n        ctx.fillStyle = colors.top\r\n        ctx.fillRect(17, 2, 13, 13)\r\n        ctx.fillStyle = colors.bottom\r\n        ctx.fillRect(2, 17, 13, 13)\r\n        ctx.fillStyle = colors.bottom\r\n        ctx.fillRect(17, 17, 13, 13)\r\n\r\n        let canvasTexture = new THREE.Texture(canvas)\r\n        canvasTexture.wrapS = THREE.RepeatWrapping;\r\n        canvasTexture.wrapT = THREE.RepeatWrapping;\r\n        canvasTexture.needsUpdate = true;\r\n\r\n        return canvasTexture;\r\n    }\r\n}\r\n\r\nexport default textures;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/mini-city/js/textures.js","let treesPosition = [\n    [-110, -110],\n    [-90, -110],\n    [-70, -110],\n    [-50, -110],\n    [-30, -110],\n    [-10, -110],\n    [10, -110],\n    [30, -110],\n    [50, -110],\n    [70, -110],\n    [90, -110],\n    [-110, 110],\n    [-110, 90],\n    [-110, 70],\n    [-110, 50],\n    [-110, 30],\n    [-110, 10],\n    [-110, -10],\n    [-110, -30],\n    [-110, -50],\n    [-110, -70],\n    [-110, -90],\n    [110, 110],\n    [90, 110],\n    [70, 110],\n    [50, 110],\n    [30, 110],\n    [-30, 110],\n    [-50, 110],\n    [-70, 110],\n    [-90, 110],\n    [110, -110],\n    [110, -90],\n    [110, -70],\n    [110, -50],\n    [110, -30],\n    [110, -10],\n    [110, 10],\n    [110, 30],\n    [110, 50],\n    [110, 70],\n    [110, 90]\n]\nexport default treesPosition;\n\n\n// WEBPACK FOOTER //\n// ./src/pages/mini-city/config/treesPosition.js","<template>\n    <div class=\"container\">\n        <div class=\"info\">\n            <a class=\"title\" href=\"https://github.com/luosijie/threejs-examples\" target=\"_blank\">\n                Mini City\n            </a>\n            <a class=\"author\" href=\"https://luosijie.github.io/\" target=\"_blank\">\n                Created By Jesse Luo\n            </a>\n        </div>\n        <canvas/>\n    </div>\n</template>\n<script>\nimport Car from './js/Car'\nimport textures from './js/textures.js'\nimport treesPosition from './config/treesPosition'\nimport utils from './js/utils.js'\nexport default {\n    name: 'HelloWorld',\n    data() {\n        return {\n            scene: null,\n            camera: null,\n            renderer: null,\n            cars: [],\n            width: '',\n            height: '',\n            config: {\n                isMobile: false,\n                background: 0x282828\n            }\n        }\n    },\n    methods: {\n        checkUserAgent() {\n            let n = navigator.userAgent;\n            if (n.match(/Android/i) || n.match(/webOS/i) || n.match(/iPhone/i) || n.match(/iPad/i) || n.match(/iPod/i) || n.match(/BlackBerry/i)) {\n                this.config.isMobile = true\n                this.camera.position.set(420, 420, 420)\n                this.renderer.shadowMap.enabled = false\n            }\n        },\n        buildMovingCars() {\n            let carsPosition = [\n                [-130, 145, 0],\n                [10, 145, 0],\n                [145, 20, 0.5],\n                [30, -145, 1],\n                [-145, -60, 1.5]\n            ]\n            carsPosition.forEach(elem => {\n                let car = new Car()\n                let x = elem[0],\n                    z = elem[1],\n                    r = elem[2]\n                car.setPosition(x, 0, z)\n                car.mesh.rotation.y = r * Math.PI\n                this.cars.push(car)\n                this.scene.add(car.mesh)\n            })\n        },\n        buildStaticCars() {\n            let carsPosition = [\n                [-84, 82, 1.5],\n                [-58, 82, 1.5],\n                [-32, 82, 1.5],\n                [84, 82, 1.5]\n            ]\n            carsPosition.forEach(elem => {\n                let car = new Car()\n                let x = elem[0],\n                    z = elem[1],\n                    r = elem[2]\n                car.setPosition(x, 0, z)\n                car.mesh.rotation.y = r * Math.PI\n                this.scene.add(car.mesh)\n            })\n        },\n        buildRoad() {\n            let road = new THREE.Object3D()\n            let roadColor = 0xffffff\n            let roadBorderOuterCoords = [\n                [-160, 160],\n                [160, 160],\n                [160, -160],\n                [-160, -160]\n            ]\n            let roadBorderOuterHoleCoords = [\n                [-159, 159],\n                [-159, -159],\n                [159, -159],\n                [159, 159]\n            ]\n            let roadBorderOuterShape = utils.makeShape(roadBorderOuterCoords, roadBorderOuterHoleCoords)\n            let roadBorderOuterGeometry = utils.makeExtrudeGeometry(roadBorderOuterShape, 0.1)\n            let roadBorderOuter = utils.makeMesh('phong', roadBorderOuterGeometry, roadColor)\n            road.add(roadBorderOuter)\n\n            let roadBorderInnerCoords = [\n                [-131, 131],\n                [-131, -131],\n                [131, -131],\n                [131, 131],\n                [19, 131],\n                [19, 99],\n                [99, 99],\n                [99, -99],\n                [-99, -99],\n                [-99, 99],\n                [-19, 99],\n                [-19, 131]\n            ]\n            let roadBorderInnerShape = utils.makeShape(roadBorderInnerCoords)\n            let roadBorderInnnerGeometry = utils.makeExtrudeGeometry(roadBorderInnerShape, 0.1)\n            let roadBoaderInnder = utils.makeMesh('phong', roadBorderInnnerGeometry, roadColor)\n            roadBoaderInnder.rotation.y = Math.PI\n            road.add(roadBoaderInnder)\n\n            let roadLinesGeometry = new THREE.Geometry()\n            let roadLineGeometry = new THREE.BoxGeometry(20, 0.1, 2)\n\n            let roadLinesBottomGeometry = new THREE.Geometry()\n            for (let i = 0; i < 9; i++) {\n                let geometry = roadLineGeometry.clone()\n                geometry.translate(i * 30, 0, -1)\n                roadLinesBottomGeometry.merge(geometry)\n            }\n            roadLinesBottomGeometry.translate(-120, 0, 145)\n            roadLinesGeometry.merge(roadLinesBottomGeometry)\n\n            let roadLinesTopGeometry = roadLinesBottomGeometry.clone()\n            roadLinesTopGeometry.translate(0, 0, -290)\n            roadLinesGeometry.merge(roadLinesTopGeometry)\n\n            let roadLinesLeftGeometry = roadLinesBottomGeometry.clone()\n            roadLinesLeftGeometry.rotateY(0.5 * Math.PI)\n            roadLinesGeometry.merge(roadLinesLeftGeometry)\n\n            let roadLinesRightGeometry = roadLinesBottomGeometry.clone()\n            roadLinesRightGeometry.rotateY(-0.5 * Math.PI)\n            roadLinesGeometry.merge(roadLinesRightGeometry)\n            roadLinesGeometry = new THREE.BufferGeometry().fromGeometry(roadLinesGeometry)\n            let roadLines = utils.makeMesh('phong', roadLinesGeometry, roadColor)\n            road.add(roadLines)\n\n            this.scene.add(road)\n        },\n        buildbuilding() {\n            let _this = this;\n            let planeGeometry = new THREE.BoxBufferGeometry(320, 6, 320)\n            let plane = utils.makeMesh('lambert', planeGeometry, 0x6f5f6a)\n            plane.position.y = -3\n            this.scene.add(plane)\n\n            addFense()\n            addGreen()\n            addTrees()\n            addHospital()\n            addLamps()\n\n            function addLamps() {\n                let lampsPosition = [\n                    [-12.5, 12.5, 1.25],\n                    [-7.5, 12.5, -0.5],\n                    [-2.5, 12.5, -0.5],\n                    [2.5, 12.5, -0.5],\n                    [7.5, 12.5, -0.5],\n                    [12.5, 12.5, -0.25],\n                    [12.5, 7.5, 0],\n                    [12.5, 2.5, 0],\n                    [12.5, -2.5, 0],\n                    [12.5, -7.5, 0],\n                    [12.5, -12.5, 0.25],\n                    [7.5, -12.5, 0.5],\n                    [2.5, -12.5, 0.5],\n                    [-2.5, -12.5, 0.5],\n                    [-7.5, -12.5, 0.5],\n                    [-12.5, -12.5, 0.75],\n                    [-12.5, -7.5, 1],\n                    [-12.5, -2.5, 1],\n                    [-12.5, 2.5, 1],\n                    [-12.5, 7.5, 1]\n                ]\n\n                lampsPosition.forEach(function(elem) {\n                    let x = elem[0] * 10,\n                        z = elem[1] * 10,\n                        r = elem[2]\n                    let lamp = createLamp()\n                    lamp.rotation.y = r * Math.PI\n                    lamp.position.set(x, 0, z)\n                    _this.scene.add(lamp)\n                })\n            }\n\n            function addHospital() {\n                let hospital = createHospital()\n                hospital.position.z = -20\n                _this.scene.add(hospital)\n            }\n\n            function addGreen() {\n                let greenCoords = [\n                    [-120, -120],\n                    [-120, 120],\n                    [120, 120],\n                    [120, -120],\n                    [20, -120],\n                    [20, -100],\n                    [100, -100],\n                    [100, 100],\n                    [-100, 100],\n                    [-100, -100],\n                    [-20, -100],\n                    [-20, -120],\n                    [-120, -120]\n                ]\n                let greenShape = utils.makeShape(greenCoords)\n\n                let greenGeometry = utils.makeExtrudeGeometry(greenShape, 3)\n                let green = utils.makeMesh('lambert', greenGeometry, 0xc0c06a)\n                _this.scene.add(green)\n            }\n\n            function addFense() {\n                let fenseCoords = [\n                    [-130, -130],\n                    [-130, 130],\n                    [130, 130],\n                    [130, -130],\n                    [20, -130],\n                    [20, -120],\n                    [120, -120],\n                    [120, 120],\n                    [-120, 120],\n                    [-120, -120],\n                    [-20, -120],\n                    [-20, -130],\n                    [-130, -130]\n                ]\n                let fenseShape = utils.makeShape(fenseCoords)\n\n                let fenseGeometry = utils.makeExtrudeGeometry(fenseShape, 3)\n                let fense = utils.makeMesh('lambert', fenseGeometry, 0xe5cabf)\n                _this.scene.add(fense)\n            }\n\n            function addTrees() {\n                treesPosition.forEach(function(elem) {\n                    let x = elem[0],\n                        y = 1,\n                        z = elem[1]\n                    let tree = createTree(x, y, z)\n                    _this.scene.add(tree)\n                })\n            }\n\n            function createLamp() {\n                let lamp = new THREE.Object3D()\n                let pillarGeomertry = new THREE.CubeGeometry(2, 30, 2)\n                pillarGeomertry.translate(0, 15, 0)\n                let pillar = utils.makeMesh('phong', pillarGeomertry, 0xebd1c2)\n                lamp.add(pillar)\n\n                let connectGeometry = new THREE.CubeGeometry(10, 1, 1)\n                let connect = utils.makeMesh('phong', connectGeometry, 0x2c0e0e)\n                connect.position.set(3, 30, 0)\n                lamp.add(connect)\n\n                let lightGeometry = new THREE.CubeGeometry(6, 2, 4)\n                let light\n                light = utils.makeMesh('phong', lightGeometry, 0xebd1c2)\n                light.position.set(10, 30, 0)\n                lamp.add(light)\n\n                return lamp\n            }\n\n            function createHospital() {\n                let hospital = new THREE.Object3D()\n\n                let baseGeometry = new THREE.BoxBufferGeometry(180, 3, 140)\n                let base = utils.makeMesh('lambert', baseGeometry, 0xffffff)\n                base.position.y = 1\n                hospital.add(base)\n\n                let frontMainCoords = [\n                    [-80, -30],\n                    [-80, 20],\n                    [50, 20],\n                    [50, 0],\n                    [20, -30],\n                    [-80, -30]\n                ]\n                let frontMainShape = utils.makeShape(frontMainCoords)\n                let frontMainGeometry = utils.makeExtrudeGeometry(frontMainShape, 100)\n                let frontMainMaterial = new THREE.MeshPhongMaterial({ map: textures.window() })\n                frontMainMaterial.map.repeat.set(0.1, 0.08)\n                let frontMain = new THREE.Mesh(frontMainGeometry, frontMainMaterial)\n                frontMain.castShadow = true\n                frontMain.receiveShadow = true\n                hospital.add(frontMain)\n\n                let frontTopShape = frontMainShape\n                let frontTopGeometry = utils.makeExtrudeGeometry(frontTopShape, 5)\n                let frontTop = utils.makeMesh('lambert', frontTopGeometry, 0xb1a7af)\n                frontTop.position.y = 100\n                hospital.add(frontTop)\n\n                let frontRoofShelfGeometry = new THREE.Geometry()\n                let frontRoofShelfCubeGeometry = new THREE.BoxGeometry(2, 2, 40)\n                // for z-axis\n                for (let i = 0; i < 12; i++) {\n                    let geometry = frontRoofShelfCubeGeometry.clone()\n                    geometry.translate(i * 5, 0, 0)\n                    frontRoofShelfGeometry.merge(geometry)\n                }\n                // for x-axis\n                for (let i = 0; i < 2; i++) {\n                    let geometry = frontRoofShelfCubeGeometry.clone()\n                    geometry.rotateY(0.5 * Math.PI)\n                    geometry.scale(1.6, 1, 1)\n                    geometry.translate(27, 0, -15 + i * 30)\n                    frontRoofShelfGeometry.merge(geometry)\n                }\n                // for y-axis\n                let frontRoofShelfCubeYPosition = [\n                    [0, 0],\n                    [1, 0],\n                    [0, 1],\n                    [1, 1]\n                ]\n                for (let i = 0; i < frontRoofShelfCubeYPosition.length; i++) {\n                    let p = frontRoofShelfCubeYPosition[i]\n                    let geometry = frontRoofShelfCubeGeometry.clone()\n                    geometry.scale(1, 1, 0.4)\n                    geometry.rotateX(0.5 * Math.PI)\n                    geometry.translate(p[0] * 55, 0, -15 + p[1] * 30)\n                    frontRoofShelfGeometry.merge(geometry)\n                }\n                frontRoofShelfGeometry = new THREE.BufferGeometry().fromGeometry(frontRoofShelfGeometry)\n                let frontRoofShelf = utils.makeMesh('phong', frontRoofShelfGeometry, 0xffffff)\n                frontRoofShelf.position.set(-70, 115, 5)\n                hospital.add(frontRoofShelf)\n\n                let frontPlatGeometry = new THREE.BoxBufferGeometry(150, 3, 90)\n                let fronPlat = utils.makeMesh('lambert', frontPlatGeometry, 0x0792a5)\n                fronPlat.position.set(-3, 18, 25)\n                hospital.add(fronPlat)\n\n                let frontPlatVerticalGeometry = new THREE.BoxBufferGeometry(150, 15, 3)\n                let frontPlatVertical = utils.makeMesh('phong', frontPlatVerticalGeometry, 0x0792a5)\n                frontPlatVertical.receiveShadow = false\n                frontPlatVertical.position.set(-3, 24, 68.5)\n                hospital.add(frontPlatVertical)\n\n                let frontPlatVerticalWhiteGeometry = new THREE.BoxBufferGeometry(150, 3, 3)\n                let frontPlatVerticalWhite = utils.makeMesh('phong', frontPlatVerticalWhiteGeometry, 0xffffff)\n                frontPlatVerticalWhite.position.set(-3, 33, 68.5)\n                hospital.add(frontPlatVerticalWhite)\n\n                let frontPlatPillarGeometry = new THREE.CylinderGeometry(2, 2, 15, 32)\n                let frontPlatPillar = utils.makeMesh('lambert', frontPlatPillarGeometry, 0xffffff)\n                frontPlatPillar.position.set(-60, 10, 55)\n                hospital.add(frontPlatPillar)\n\n                let frontPlatPillar2 = frontPlatPillar.clone()\n                frontPlatPillar2.position.set(55, 10, 55)\n                hospital.add(frontPlatPillar2)\n\n                let frontBorderVerticles = new THREE.Object3D()\n                let frontBorderVerticleGeometry = new THREE.BoxBufferGeometry(4, 106, 4)\n                let frontBorderVerticleMesh = utils.makeMesh('phong', frontBorderVerticleGeometry, 0xffffff)\n                let frontBorderVerticle1 = frontBorderVerticleMesh.clone()\n                frontBorderVerticle1.position.set(-80, 52, 30)\n                frontBorderVerticles.add(frontBorderVerticle1)\n                let frontBorderVerticle2 = frontBorderVerticleMesh.clone()\n                frontBorderVerticle2.position.set(-80, 52, -20)\n                frontBorderVerticles.add(frontBorderVerticle2)\n                let frontBorderVerticle3 = frontBorderVerticleMesh.clone()\n                frontBorderVerticle3.position.set(50, 52, -18)\n                frontBorderVerticles.add(frontBorderVerticle3)\n                hospital.add(frontBorderVerticles)\n\n                let frontRoofCoords = [\n                    [-82, -32],\n                    [20, -32],\n                    [52, 0],\n                    [52, 22],\n                    [-82, 22],\n                    [-82, -32]\n                ]\n                let frontRoofHolePath = [\n                    [-78, -28],\n                    [20, -28],\n                    [48, 0],\n                    [48, 18],\n                    [-78, 18],\n                    [-78, -28]\n                ]\n                let frontRoofShape = utils.makeShape(frontRoofCoords, frontRoofHolePath)\n                let frontRoofGeometry = utils.makeExtrudeGeometry(frontRoofShape, 8)\n                let frontRoof = utils.makeMesh('phong', frontRoofGeometry, 0xffffff)\n                frontRoof.position.y = 100\n                hospital.add(frontRoof)\n\n                let backMainCoords = [\n                    [-80, 20],\n                    [-80, 60],\n                    [80, 60],\n                    [80, 20],\n                    [-80, 20]\n                ]\n                let backMainHolePath = [\n                    [-78, 22],\n                    [78, 22],\n                    [78, 58],\n                    [-78, 58],\n                    [-78, 22]\n                ]\n                let backMainShape = utils.makeShape(backMainCoords, backMainHolePath)\n\n                let backMainGeometry = utils.makeExtrudeGeometry(backMainShape, 90)\n                let backMain = utils.makeMesh('lambert', backMainGeometry, 0xf2e21b)\n                hospital.add(backMain)\n\n                let backMiddleCoords = [\n                    [0, 0],\n                    [36, 0],\n                    [36, 70],\n                    [0, 70],\n                    [0, 0]\n                ]\n                let backMiddleHolePath = [\n                    [2, 2],\n                    [34, 2],\n                    [34, 68],\n                    [2, 68],\n                    [2, 2]\n                ]\n                let backMiddleShape = utils.makeShape(backMiddleCoords, backMiddleHolePath)\n                let backMiddkeGeometry = utils.makeExtrudeGeometry(backMiddleShape, 165)\n                let backMiddle = utils.makeMesh('lambert', backMiddkeGeometry, 0xffffff)\n\n                backMiddle.rotation.x = -0.5 * Math.PI\n                backMiddle.rotation.z = -0.5 * Math.PI\n                backMiddle.position.y = 86\n                backMiddle.position.z = -58\n                backMiddle.position.x = -78\n                hospital.add(backMiddle)\n\n                let backMiddleWindowGeometry = new THREE.PlaneGeometry(32, 66, 1, 1)\n                let backMiddleWindowMaterial = new THREE.MeshPhongMaterial({ map: textures.window() })\n                backMiddleWindowMaterial.map.repeat.set(2, 6)\n\n                let backMiddleWindow = new THREE.Mesh(backMiddleWindowGeometry, backMiddleWindowMaterial)\n                backMiddleWindow.position.set(83, 51, -40)\n                backMiddleWindow.rotation.y = 0.5 * Math.PI\n                hospital.add(backMiddleWindow)\n\n                let windowBackOrigin = createWindow()\n                windowBackOrigin.scale.set(0.6, 0.6, 1)\n                windowBackOrigin.rotation.y = Math.PI\n                windowBackOrigin.position.set(65, 75, -61)\n                for (let i = 0; i < 7; i++) {\n                    for (let j = 0; j < 4; j++) {\n                        let windowObj = windowBackOrigin.clone()\n                        windowObj.position.x -= i * 22\n                        windowObj.position.y -= j * 20\n                        hospital.add(windowObj)\n                    }\n                }\n\n                return hospital\n            }\n\n            function createWindow() {\n                let windowObj = new THREE.Object3D()\n                let glassGeometry = new THREE.PlaneGeometry(20, 20)\n                let glass = utils.makeMesh('phong', glassGeometry, 0x6a5e74)\n                windowObj.add(glass)\n\n                let windowBorderGeometry = new THREE.BoxBufferGeometry(22, 2, 2)\n                let windowBorder = utils.makeMesh('phong', windowBorderGeometry, 0xffffff)\n\n                let windowBorderTop = windowBorder.clone()\n                windowBorderTop.position.y = 10\n                windowObj.add(windowBorderTop)\n\n                let windowBorderBottom = windowBorder.clone()\n                windowBorderBottom.position.y = -10\n                windowObj.add(windowBorderBottom)\n\n                let windowBorderLeft = windowBorder.clone()\n                windowBorderLeft.rotation.z = 0.5 * Math.PI\n                windowBorderLeft.position.x = -10\n                windowObj.add(windowBorderLeft)\n\n                let windowBorderRight = windowBorderLeft.clone()\n                windowBorderRight.position.x = 10\n                windowObj.add(windowBorderRight)\n\n                return windowObj\n            }\n\n            function createTree(x, y, z) {\n                x = x || 0\n                y = y || 0\n                z = z || 0\n\n                let tree = new THREE.Object3D()\n\n                let treeTrunkGeometry = new THREE.BoxBufferGeometry(2, 16, 2)\n                let treeTrunk = utils.makeMesh('lambert', treeTrunkGeometry, 0x8a613a)\n                treeTrunk.position.y = 8\n                tree.add(treeTrunk)\n\n                let treeLeafsGeometry = new THREE.BoxBufferGeometry(8, 8, 8)\n                let treeLeafs = utils.makeMesh('lambert', treeLeafsGeometry, 0x9c9e5d)\n                treeLeafs.position.y = 13\n                tree.add(treeLeafs)\n\n                tree.position.set(x, y, z)\n\n                return tree\n            }\n        },\n        buildLightSystem() {\n\n            if (!this.config.isMobile) {\n                let directionalLight = new THREE.DirectionalLight(0xffffff, 1.1);\n                directionalLight.position.set(300, 1000, 500);\n                directionalLight.target.position.set(0, 0, 0);\n                directionalLight.castShadow = true;\n\n                let d = 300;\n                directionalLight.shadow.camera = new THREE.OrthographicCamera(-d, d, d, -d, 500, 1600);\n                directionalLight.shadow.bias = 0.0001;\n                directionalLight.shadow.mapSize.width = directionalLight.shadow.mapSize.height = 1024;\n                this.scene.add(directionalLight)\n\n                let light = new THREE.AmbientLight(0xffffff, 0.3)\n                this.scene.add(light)\n            } else {\n                let hemisphereLight = new THREE.HemisphereLight(0xffffff, 1)\n                this.scene.add(hemisphereLight)\n\n                let light = new THREE.AmbientLight(0xffffff, 0.15)\n                this.scene.add(light)\n            }\n        },\n        // 构建辅助系统\n        buildAuxSystem() {\n            let gridHelper = new THREE.GridHelper(320, 32)\n            this.scene.add(gridHelper)\n\n            let controls = new THREE.OrbitControls(this.camera, this.renderer.domElement)\n            controls.enableDamping = true\n            controls.dampingFactor = 0.25\n            controls.rotateSpeed = 0.35\n        },\n        carMoving(car) {\n            let angle = car.mesh.rotation.y\n            let x = car.mesh.position.x,\n                z = car.mesh.position.z\n\n            if (x < 145 && z === 145) {\n                car.forward()\n            } else if (angle < 0.5 * Math.PI) {\n                car.turnLeft(0.5 * Math.PI, 0.1)\n            } else if (x === 145 && z > -145) {\n                car.forward()\n            } else if (angle < Math.PI) {\n                car.turnLeft(0.5 * Math.PI, 0.1)\n            } else if (x > -145 && z == -145) {\n                car.forward()\n            } else if (angle < 1.5 * Math.PI) {\n                car.turnLeft(0.5 * Math.PI, 0.1)\n            } else if (x === -145 && z < 145) {\n                car.mesh.rotation.y = 1.5 * Math.PI\n                car.forward()\n            } else if (angle < 2 * Math.PI) {\n                car.turnLeft(0.5 * Math.PI, 0.1)\n            } else {\n                car.setPosition(-145, 0, 145)\n                car.mesh.rotation.set(0, 0, 0)\n            }\n        },\n        onWindowResize() {\n            window.addEventListener('resize', () => {\n                this.width = window.innerWidth\n                this.height = window.innerHeight\n\n                this.camera.aspect = this.width / this.height;\n                this.camera.updateProjectionMatrix()\n\n                this.renderer.setSize(this.width, this.height)\n            })\n        },\n        loop() {\n            // stats.update()\n            this.cars.forEach(car => {\n                this.carMoving(car)\n            })\n            this.renderer.render(this.scene, this.camera)\n            requestAnimationFrame(this.loop)\n        }\n    },\n    mounted() {\n\n        this.width = window.innerWidth\n        this.height = window.innerHeight\n\n        this.scene = new THREE.Scene()\n        this.camera = new THREE.PerspectiveCamera(45, this.width / this.height, 1, 5000)\n        this.camera.position.set(330, 330, 330)\n        this.camera.lookAt(this.scene.position)\n\n        this.renderer = new THREE.WebGLRenderer({ \n            antialias: true,\n            canvas: document.querySelector('canvas')\n        });\n        this.renderer.setSize(this.width, this.height)\n        this.renderer.setClearColor(this.config.background)\n        this.renderer.shadowMap.enabled = true\n        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap\n        // document.body.appendChild(this.renderer.domElement)\n\n        this.checkUserAgent()\n\n        this.buildAuxSystem()\n        this.buildLightSystem()\n        this.buildbuilding()\n        this.buildRoad()\n        this.buildStaticCars()\n        this.buildMovingCars()\n\n        this.loop()\n        this.onWindowResize()\n    }\n}\n\n</script>\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style lang=\"scss\" scoped>\n.container {\n    margin: 20px 0;\n    position: absolute;\n    text-align: center;\n    width: 100%;\n    .info {\n        opacity: 0.2;\n    }\n    a {\n        display: block;\n        font-size: 16px;\n        line-height: 28px;\n        color: #ffffff;\n        text-decoration: none;\n    }\n}\n\na.title {\n    font-size: 20px;\n    font-weight: bold;\n}\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/pages/mini-city/index.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"container\"},[_c('div',{staticClass:\"info\"},[_c('a',{staticClass:\"title\",attrs:{\"href\":\"https://github.com/luosijie/threejs-examples\",\"target\":\"_blank\"}},[_vm._v(\"\\n            Mini City\\n        \")]),_vm._v(\" \"),_c('a',{staticClass:\"author\",attrs:{\"href\":\"https://luosijie.github.io/\",\"target\":\"_blank\"}},[_vm._v(\"\\n            Created By Jesse Luo\\n        \")])]),_vm._v(\" \"),_c('canvas')])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-24b9f3a1\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/pages/mini-city/index.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-24b9f3a1\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./index.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-24b9f3a1\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./index.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-24b9f3a1\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/mini-city/index.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}